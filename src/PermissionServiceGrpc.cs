// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: authzed/api/v1/permission_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Authzed.Api.V1 {
  /// <summary>
  /// PermissionsService is used to perform permissions and relationship
  /// operations.
  /// </summary>
  public static partial class PermissionsService
  {
    static readonly string __ServiceName = "authzed.api.v1.PermissionsService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Authzed.Api.V1.ReadRelationshipsRequest> __Marshaller_authzed_api_v1_ReadRelationshipsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Authzed.Api.V1.ReadRelationshipsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Authzed.Api.V1.ReadRelationshipsResponse> __Marshaller_authzed_api_v1_ReadRelationshipsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Authzed.Api.V1.ReadRelationshipsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Authzed.Api.V1.WriteRelationshipsRequest> __Marshaller_authzed_api_v1_WriteRelationshipsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Authzed.Api.V1.WriteRelationshipsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Authzed.Api.V1.WriteRelationshipsResponse> __Marshaller_authzed_api_v1_WriteRelationshipsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Authzed.Api.V1.WriteRelationshipsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Authzed.Api.V1.DeleteRelationshipsRequest> __Marshaller_authzed_api_v1_DeleteRelationshipsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Authzed.Api.V1.DeleteRelationshipsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Authzed.Api.V1.DeleteRelationshipsResponse> __Marshaller_authzed_api_v1_DeleteRelationshipsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Authzed.Api.V1.DeleteRelationshipsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Authzed.Api.V1.CheckPermissionRequest> __Marshaller_authzed_api_v1_CheckPermissionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Authzed.Api.V1.CheckPermissionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Authzed.Api.V1.CheckPermissionResponse> __Marshaller_authzed_api_v1_CheckPermissionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Authzed.Api.V1.CheckPermissionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Authzed.Api.V1.ExpandPermissionTreeRequest> __Marshaller_authzed_api_v1_ExpandPermissionTreeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Authzed.Api.V1.ExpandPermissionTreeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Authzed.Api.V1.ExpandPermissionTreeResponse> __Marshaller_authzed_api_v1_ExpandPermissionTreeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Authzed.Api.V1.ExpandPermissionTreeResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Authzed.Api.V1.LookupResourcesRequest> __Marshaller_authzed_api_v1_LookupResourcesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Authzed.Api.V1.LookupResourcesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Authzed.Api.V1.LookupResourcesResponse> __Marshaller_authzed_api_v1_LookupResourcesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Authzed.Api.V1.LookupResourcesResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Authzed.Api.V1.ReadRelationshipsRequest, global::Authzed.Api.V1.ReadRelationshipsResponse> __Method_ReadRelationships = new grpc::Method<global::Authzed.Api.V1.ReadRelationshipsRequest, global::Authzed.Api.V1.ReadRelationshipsResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ReadRelationships",
        __Marshaller_authzed_api_v1_ReadRelationshipsRequest,
        __Marshaller_authzed_api_v1_ReadRelationshipsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Authzed.Api.V1.WriteRelationshipsRequest, global::Authzed.Api.V1.WriteRelationshipsResponse> __Method_WriteRelationships = new grpc::Method<global::Authzed.Api.V1.WriteRelationshipsRequest, global::Authzed.Api.V1.WriteRelationshipsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "WriteRelationships",
        __Marshaller_authzed_api_v1_WriteRelationshipsRequest,
        __Marshaller_authzed_api_v1_WriteRelationshipsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Authzed.Api.V1.DeleteRelationshipsRequest, global::Authzed.Api.V1.DeleteRelationshipsResponse> __Method_DeleteRelationships = new grpc::Method<global::Authzed.Api.V1.DeleteRelationshipsRequest, global::Authzed.Api.V1.DeleteRelationshipsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteRelationships",
        __Marshaller_authzed_api_v1_DeleteRelationshipsRequest,
        __Marshaller_authzed_api_v1_DeleteRelationshipsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Authzed.Api.V1.CheckPermissionRequest, global::Authzed.Api.V1.CheckPermissionResponse> __Method_CheckPermission = new grpc::Method<global::Authzed.Api.V1.CheckPermissionRequest, global::Authzed.Api.V1.CheckPermissionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CheckPermission",
        __Marshaller_authzed_api_v1_CheckPermissionRequest,
        __Marshaller_authzed_api_v1_CheckPermissionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Authzed.Api.V1.ExpandPermissionTreeRequest, global::Authzed.Api.V1.ExpandPermissionTreeResponse> __Method_ExpandPermissionTree = new grpc::Method<global::Authzed.Api.V1.ExpandPermissionTreeRequest, global::Authzed.Api.V1.ExpandPermissionTreeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExpandPermissionTree",
        __Marshaller_authzed_api_v1_ExpandPermissionTreeRequest,
        __Marshaller_authzed_api_v1_ExpandPermissionTreeResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Authzed.Api.V1.LookupResourcesRequest, global::Authzed.Api.V1.LookupResourcesResponse> __Method_LookupResources = new grpc::Method<global::Authzed.Api.V1.LookupResourcesRequest, global::Authzed.Api.V1.LookupResourcesResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "LookupResources",
        __Marshaller_authzed_api_v1_LookupResourcesRequest,
        __Marshaller_authzed_api_v1_LookupResourcesResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Authzed.Api.V1.PermissionServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of PermissionsService</summary>
    [grpc::BindServiceMethod(typeof(PermissionsService), "BindService")]
    public abstract partial class PermissionsServiceBase
    {
      /// <summary>
      /// ReadRelationships reads a set of the relationships matching one or more
      /// filters.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task ReadRelationships(global::Authzed.Api.V1.ReadRelationshipsRequest request, grpc::IServerStreamWriter<global::Authzed.Api.V1.ReadRelationshipsResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// WriteRelationships writes and/or deletes a set of specified relationships,
      /// with an optional set of precondition relationships that must exist before
      /// the operation can commit.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Authzed.Api.V1.WriteRelationshipsResponse> WriteRelationships(global::Authzed.Api.V1.WriteRelationshipsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// DeleteRelationships deletes relationships matching one or more filters, in
      /// bulk.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Authzed.Api.V1.DeleteRelationshipsResponse> DeleteRelationships(global::Authzed.Api.V1.DeleteRelationshipsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// CheckPermission checks whether a subject has a particular permission or is
      /// a member of a particular relation, on a given resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Authzed.Api.V1.CheckPermissionResponse> CheckPermission(global::Authzed.Api.V1.CheckPermissionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ExpandPermissionTree expands the relationships reachable from a particular
      /// permission or relation of a given resource.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Authzed.Api.V1.ExpandPermissionTreeResponse> ExpandPermissionTree(global::Authzed.Api.V1.ExpandPermissionTreeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// LookupResources returns the IDs of all resources on which the specified
      /// subject has permission or on which the specified subject is a member of the
      /// relation.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task LookupResources(global::Authzed.Api.V1.LookupResourcesRequest request, grpc::IServerStreamWriter<global::Authzed.Api.V1.LookupResourcesResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for PermissionsService</summary>
    public partial class PermissionsServiceClient : grpc::ClientBase<PermissionsServiceClient>
    {
      /// <summary>Creates a new client for PermissionsService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public PermissionsServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for PermissionsService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public PermissionsServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected PermissionsServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected PermissionsServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// ReadRelationships reads a set of the relationships matching one or more
      /// filters.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Authzed.Api.V1.ReadRelationshipsResponse> ReadRelationships(global::Authzed.Api.V1.ReadRelationshipsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReadRelationships(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ReadRelationships reads a set of the relationships matching one or more
      /// filters.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Authzed.Api.V1.ReadRelationshipsResponse> ReadRelationships(global::Authzed.Api.V1.ReadRelationshipsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ReadRelationships, null, options, request);
      }
      /// <summary>
      /// WriteRelationships writes and/or deletes a set of specified relationships,
      /// with an optional set of precondition relationships that must exist before
      /// the operation can commit.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Authzed.Api.V1.WriteRelationshipsResponse WriteRelationships(global::Authzed.Api.V1.WriteRelationshipsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WriteRelationships(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// WriteRelationships writes and/or deletes a set of specified relationships,
      /// with an optional set of precondition relationships that must exist before
      /// the operation can commit.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Authzed.Api.V1.WriteRelationshipsResponse WriteRelationships(global::Authzed.Api.V1.WriteRelationshipsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_WriteRelationships, null, options, request);
      }
      /// <summary>
      /// WriteRelationships writes and/or deletes a set of specified relationships,
      /// with an optional set of precondition relationships that must exist before
      /// the operation can commit.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Authzed.Api.V1.WriteRelationshipsResponse> WriteRelationshipsAsync(global::Authzed.Api.V1.WriteRelationshipsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WriteRelationshipsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// WriteRelationships writes and/or deletes a set of specified relationships,
      /// with an optional set of precondition relationships that must exist before
      /// the operation can commit.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Authzed.Api.V1.WriteRelationshipsResponse> WriteRelationshipsAsync(global::Authzed.Api.V1.WriteRelationshipsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_WriteRelationships, null, options, request);
      }
      /// <summary>
      /// DeleteRelationships deletes relationships matching one or more filters, in
      /// bulk.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Authzed.Api.V1.DeleteRelationshipsResponse DeleteRelationships(global::Authzed.Api.V1.DeleteRelationshipsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRelationships(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteRelationships deletes relationships matching one or more filters, in
      /// bulk.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Authzed.Api.V1.DeleteRelationshipsResponse DeleteRelationships(global::Authzed.Api.V1.DeleteRelationshipsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteRelationships, null, options, request);
      }
      /// <summary>
      /// DeleteRelationships deletes relationships matching one or more filters, in
      /// bulk.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Authzed.Api.V1.DeleteRelationshipsResponse> DeleteRelationshipsAsync(global::Authzed.Api.V1.DeleteRelationshipsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRelationshipsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteRelationships deletes relationships matching one or more filters, in
      /// bulk.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Authzed.Api.V1.DeleteRelationshipsResponse> DeleteRelationshipsAsync(global::Authzed.Api.V1.DeleteRelationshipsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteRelationships, null, options, request);
      }
      /// <summary>
      /// CheckPermission checks whether a subject has a particular permission or is
      /// a member of a particular relation, on a given resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Authzed.Api.V1.CheckPermissionResponse CheckPermission(global::Authzed.Api.V1.CheckPermissionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckPermission(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CheckPermission checks whether a subject has a particular permission or is
      /// a member of a particular relation, on a given resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Authzed.Api.V1.CheckPermissionResponse CheckPermission(global::Authzed.Api.V1.CheckPermissionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CheckPermission, null, options, request);
      }
      /// <summary>
      /// CheckPermission checks whether a subject has a particular permission or is
      /// a member of a particular relation, on a given resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Authzed.Api.V1.CheckPermissionResponse> CheckPermissionAsync(global::Authzed.Api.V1.CheckPermissionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckPermissionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CheckPermission checks whether a subject has a particular permission or is
      /// a member of a particular relation, on a given resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Authzed.Api.V1.CheckPermissionResponse> CheckPermissionAsync(global::Authzed.Api.V1.CheckPermissionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CheckPermission, null, options, request);
      }
      /// <summary>
      /// ExpandPermissionTree expands the relationships reachable from a particular
      /// permission or relation of a given resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Authzed.Api.V1.ExpandPermissionTreeResponse ExpandPermissionTree(global::Authzed.Api.V1.ExpandPermissionTreeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExpandPermissionTree(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ExpandPermissionTree expands the relationships reachable from a particular
      /// permission or relation of a given resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Authzed.Api.V1.ExpandPermissionTreeResponse ExpandPermissionTree(global::Authzed.Api.V1.ExpandPermissionTreeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExpandPermissionTree, null, options, request);
      }
      /// <summary>
      /// ExpandPermissionTree expands the relationships reachable from a particular
      /// permission or relation of a given resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Authzed.Api.V1.ExpandPermissionTreeResponse> ExpandPermissionTreeAsync(global::Authzed.Api.V1.ExpandPermissionTreeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExpandPermissionTreeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ExpandPermissionTree expands the relationships reachable from a particular
      /// permission or relation of a given resource.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Authzed.Api.V1.ExpandPermissionTreeResponse> ExpandPermissionTreeAsync(global::Authzed.Api.V1.ExpandPermissionTreeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExpandPermissionTree, null, options, request);
      }
      /// <summary>
      /// LookupResources returns the IDs of all resources on which the specified
      /// subject has permission or on which the specified subject is a member of the
      /// relation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Authzed.Api.V1.LookupResourcesResponse> LookupResources(global::Authzed.Api.V1.LookupResourcesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LookupResources(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// LookupResources returns the IDs of all resources on which the specified
      /// subject has permission or on which the specified subject is a member of the
      /// relation.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::Authzed.Api.V1.LookupResourcesResponse> LookupResources(global::Authzed.Api.V1.LookupResourcesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_LookupResources, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override PermissionsServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PermissionsServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(PermissionsServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ReadRelationships, serviceImpl.ReadRelationships)
          .AddMethod(__Method_WriteRelationships, serviceImpl.WriteRelationships)
          .AddMethod(__Method_DeleteRelationships, serviceImpl.DeleteRelationships)
          .AddMethod(__Method_CheckPermission, serviceImpl.CheckPermission)
          .AddMethod(__Method_ExpandPermissionTree, serviceImpl.ExpandPermissionTree)
          .AddMethod(__Method_LookupResources, serviceImpl.LookupResources).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, PermissionsServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ReadRelationships, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Authzed.Api.V1.ReadRelationshipsRequest, global::Authzed.Api.V1.ReadRelationshipsResponse>(serviceImpl.ReadRelationships));
      serviceBinder.AddMethod(__Method_WriteRelationships, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Authzed.Api.V1.WriteRelationshipsRequest, global::Authzed.Api.V1.WriteRelationshipsResponse>(serviceImpl.WriteRelationships));
      serviceBinder.AddMethod(__Method_DeleteRelationships, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Authzed.Api.V1.DeleteRelationshipsRequest, global::Authzed.Api.V1.DeleteRelationshipsResponse>(serviceImpl.DeleteRelationships));
      serviceBinder.AddMethod(__Method_CheckPermission, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Authzed.Api.V1.CheckPermissionRequest, global::Authzed.Api.V1.CheckPermissionResponse>(serviceImpl.CheckPermission));
      serviceBinder.AddMethod(__Method_ExpandPermissionTree, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Authzed.Api.V1.ExpandPermissionTreeRequest, global::Authzed.Api.V1.ExpandPermissionTreeResponse>(serviceImpl.ExpandPermissionTree));
      serviceBinder.AddMethod(__Method_LookupResources, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Authzed.Api.V1.LookupResourcesRequest, global::Authzed.Api.V1.LookupResourcesResponse>(serviceImpl.LookupResources));
    }

  }
}
#endregion
